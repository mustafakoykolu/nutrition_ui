import json
import psycopg2
from googletrans import Translator
# PostgreSQL bağlantısı
conn = psycopg2.connect(
    host="nutrition.ct6q6guscsom.eu-central-1.rds.amazonaws.com",
    database="nutrition",
    user="postgres",
    password="koykolu123!",
    port=5432  # Port numarası ayrı verilmelidir
)

translator = Translator()

# JSON'u Türkçeye çevirme fonksiyonu
def translate_keys(data):
    # Çeviri işlemini gerçekleştirir
    return translator.translate(text=str(data), src='en', dest='tr').text

# JSON dosyasını okuma
with open("data.json", "r") as file:
    data = json.load(file)

cursor = conn.cursor()
date_object = "2024-12-22 14:30:00"
created_by="system"
modified_by=None
modified_date=None  
# FoundationFoods listesindeki her bir gıdayı işleme
added_foods_categories = [10428, 10433, 10432, 10435, 10429, 10436, 10431, 10430, 10434, 10438, 10437, 10480, 10472, 10473, 10477, 10468, 10475, 10464, 10479, 10471, 10465, 10463, 10474, 10470, 10476, 10478, 10469, 10466, 10467, 10515, 10506, 10508, 10512, 10511, 10509, 10505, 10513, 10514, 10516, 10510, 10507, 10612, 10610, 10614, 10615, 10613, 10611, 10604, 10602, 10609, 10605, 10616, 10617, 10603, 10608, 10601, 10607, 10606, 10625, 10629, 10628, 10623, 10620, 10622, 10619, 10630, 10618, 10624, 10626, 10621, 10627, 10646, 10643, 10645, 10642, 10644, 10657, 10659, 10655, 10651, 10654, 10652, 10660, 10656, 10658, 10647, 10650, 10649, 10653, 10648, 10663, 10665, 10661, 10667, 10673, 10668, 10671, 10676, 10664, 10674, 10666, 10675, 10670, 10662, 10672, 10669, 10679, 10684, 10680, 10683, 10682, 10681, 10685, 10689, 10691, 10686, 10687, 10690, 10678, 10688, 10677, 10723, 10732, 10730, 10728, 10727, 10726, 10725, 10731, 10729, 10722, 10724, 10735, 10750, 10766, 10740, 10745, 10764, 10741, 10756, 10742, 10758, 10744, 10755, 10739, 10757, 10754, 10738, 10761, 10763, 10749, 10762, 10768, 10747, 10737, 10752, 10748, 10746, 10759, 10743, 10767, 10765, 10760, 10751, 10734, 10736, 10733, 10753, 10794, 10791, 10787, 10795, 10789, 10793, 10792, 10797, 10788, 10796, 10790, 10798, 10807, 10812, 10810, 10822, 10800, 10811, 10802, 10808, 10818, 10799, 10821, 10813, 10809, 10806, 10801, 10816, 10805, 10814, 10815, 10803, 10820, 10817, 10804, 10819, 10827, 10828, 10832, 10824, 10826, 10825, 10830, 10829, 10823, 10831, 10833, 10836, 10834, 10838, 10840, 10839, 10835, 10837, 10843, 10846, 10842, 10845, 10844, 10841, 10878, 10871, 10864, 10876, 10872, 10865, 10860, 10861, 10862, 10875, 10863, 10859, 10869, 10873, 10858, 10879, 10877, 10868, 10870, 10866, 10874, 10867, 10905, 10901, 10904, 10902, 10900, 10903, 10928, 10929, 10931, 10930, 10920, 10922, 10917, 10923, 10924, 10926, 10919, 10925, 10927, 10918, 10921, 10944, 10943, 10947, 10942, 10945, 10940, 10946, 10941, 10961, 10960, 10959, 10958, 10957, 10963, 10956, 10962, 10996, 11005, 11003, 11015, 11032, 11037, 11001, 11000, 11025, 11021, 10994, 11039, 11030, 10995, 11029, 11022, 11016, 11010, 11004, 11014, 11008, 11002, 11023, 11020, 11019, 11007, 11036, 11035, 11024, 11038, 11018, 11040, 11026, 11012, 11011, 11033, 11017, 10998, 11031, 10997, 11034, 11006, 11028, 11009, 11013, 11027, 10999, 11055, 11045, 11053, 11041, 11043, 11054, 11047, 11052, 11049, 11051, 11056, 11042, 11050, 11044, 11046, 11048, 11083, 11066, 11064, 11070, 11058, 11077, 11081, 11073, 11086, 11090, 11072, 11088, 11087, 11078, 11089, 11076, 11082, 11094, 11079, 11092, 11071, 11060, 11084, 11062, 11074, 11080, 11075, 11063, 11068, 11085, 11069, 11093, 11091, 11057, 11061, 11067, 11059, 11065, 11099, 11098, 11106, 11096, 11095, 11101, 11108, 11097, 11109, 11105, 11104, 11102, 11103, 11111, 11100, 11110, 11107, 11118, 11120, 11112, 11115, 11116, 11125, 11124, 11117, 11126, 11113, 11121, 11119, 11122, 11123, 11114, 11142, 11137, 11140, 11134, 11133, 11129, 11143, 11132, 11128, 11135, 11141, 11131, 11127, 11130, 11138, 11136, 11139, 11155, 11159, 11162, 11151, 11158, 11153, 11163, 11165, 11160, 11164, 11157, 11161, 11152, 11150, 11167, 11166, 11156, 11154, 11168, 11175, 11177, 11169, 11171, 11170, 11182, 11181, 11173, 11180, 11183, 11176, 11172, 11174, 11178, 11179, 11185, 11188, 11189, 11184, 11186, 11187, 11206, 11209, 11207, 11210, 11211, 11208, 11213, 11214, 11212, 11217, 11216, 11215, 11229, 11223, 11251, 11245, 11267, 11266, 11237, 11239, 11233, 11225, 11261, 11262, 11263, 11269, 11227, 11244, 11254, 11218, 11260, 11247, 11271, 11265, 11230, 11248, 11243, 11258, 11264, 11268, 11236, 11224, 11270, 11259, 11232, 11240, 11226, 11249, 11219, 11250, 11222, 11252, 11221, 11246, 11231, 11235, 11234, 11220, 11238, 11257, 11228, 11241, 11242, 11256, 11255, 11253, 11274, 11275, 11281, 11277, 11278, 11279, 11280, 11276, 11273, 11272, 11282, 11300, 11295, 11299, 11293, 11303, 11298, 11302, 11296, 11301, 11292, 11294, 11297, 11291, 11312, 11316, 11317, 11319, 11313, 11309, 11314, 11318, 11315, 11311, 11310, 11326, 11325, 11333, 11335, 11323, 11327, 11353, 11348, 11354, 11322, 11337, 11355, 11331, 11351, 11347, 11350, 11342, 11344, 11334, 11338, 11324, 11343, 11339, 11345, 11330, 11336, 11346, 11349, 11329, 11352, 11321, 11320, 11332, 11340, 11328, 11341, 11356, 11357, 11359, 11362, 11360, 11365, 11358, 11361, 11364, 11363, 11366, 11367, 11371, 11374, 11368, 11369, 11375, 11378, 11377, 11373, 11376, 11372, 11370, 11405, 11411, 11380, 11401, 11396, 11415, 11386, 11413, 11409, 11388, 11392, 11418, 11379, 11383, 11385, 11417, 11397, 11382, 11404, 11387, 11381, 11384, 11399, 11402, 11414, 11389, 11412, 11420, 11393, 11410, 11391, 11398, 11395, 11394, 11406, 11403, 11390, 11419, 11407, 11416, 11400, 11408, 11455, 11454, 11449, 11461, 11448, 11452, 11459, 11460, 11451, 11458, 11450, 11453, 11457, 11456, 11447, 11467, 11466, 11465, 11462, 11464, 11463, 11470, 11468, 11471, 11472, 11469, 11473, 11604, 11601, 11597, 11596, 11599, 11598, 11605, 11603, 11600, 11602, 45561, 45557, 45559, 45562, 45565, 45558, 45551, 45552, 45553, 45563, 45564, 45555, 45560, 45554, 45556, 45525, 45539, 45527, 45523, 45538, 45536, 45543, 45522, 45537, 45548, 45545, 45534, 45526, 45542, 45535, 45521, 45547, 45520, 45531, 45549, 45529, 45528, 45532, 45546, 45550, 45544, 45530, 45541, 45533, 45524, 45540, 45212, 45215, 45208, 45207, 45221, 45216, 45218, 45217, 45220, 45210, 45214, 45209, 45219, 45211, 45213, 45567, 45568, 45574, 45577, 45575, 45569, 45580, 45571, 45579, 45570, 45581, 45578, 45566, 45573, 45572, 45576, 45622, 45623, 45621, 45616, 45613, 45614, 45624, 45625, 45618, 45617, 45626, 45619, 45612, 45620, 45615, 45601, 45584, 45589, 45603, 45592, 45599, 45597, 45594, 45609, 45588, 45598, 45586, 45591, 45596, 45605, 45583, 45602, 45610, 45604, 45590, 45606, 45582, 45608, 45607, 45587, 45611, 45585, 45595, 45600, 45593, 45410, 45407, 45411, 45412, 45409, 45406, 45405, 45403, 45402, 45404, 45408, 45462, 45459, 45461, 45464, 45460, 45463, 45337, 45332, 45333, 45339, 45334, 45331, 45336, 45338, 45335, 45340, 45330]
for food in data.get("FoundationFoods", []):
    print(food["description"])
    for inputFood in food["inputFoods"]:
        if inputFood["id"] in added_foods_categories: continue
        food_query = """
        INSERT INTO "InputFoods" 
        ("Id", "DateCreated", "CreatedBy", "DateModified", "ModifiedBy", "FoodDescription","FoodDescriptionTr","FoodId") 
        VALUES (%s, %s, %s, %s, %s, %s,%s, %s) 
        RETURNING "Id";
        """
        translated_description = translate_keys(inputFood["foodDescription"])
        cursor.execute(food_query, (inputFood["id"] ,date_object,created_by, None, None , inputFood["foodDescription"],translated_description,food["ndbNumber"]))
        added_foods_categories.append(inputFood["id"])   
    print(added_foods_categories)
    conn.commit()
cursor.close()
conn.close()

   


